/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './core/routes/__root'
import { Route as IdRouteImport } from './core/routes/_id/route'
import { Route as AuthGuardRouteImport } from './core/routes/_auth-guard/route'
import { Route as IndexImport } from './core/routes/index'
import { Route as IdLoginImport } from './core/routes/_id/login'
import { Route as AuthGuardLibraryRouteImport } from './core/routes/_auth-guard/library/route'

// Create Virtual Routes

const AuthGuardSubscriptionsLazyImport = createFileRoute(
  '/_auth-guard/subscriptions',
)()
const AuthGuardProfileLazyImport = createFileRoute('/_auth-guard/profile')()
const AuthGuardLogoutLazyImport = createFileRoute('/_auth-guard/logout')()
const AuthGuardLibraryPaymentsLazyImport = createFileRoute(
  '/_auth-guard/library/payments',
)()
const AuthGuardLibraryCategoriesLazyImport = createFileRoute(
  '/_auth-guard/library/categories',
)()
const AuthGuardLibraryApplicationsLazyImport = createFileRoute(
  '/_auth-guard/library/applications',
)()

// Create/Update Routes

const IdRouteRoute = IdRouteImport.update({
  id: '/_id',
  getParentRoute: () => rootRoute,
} as any)

const AuthGuardRouteRoute = AuthGuardRouteImport.update({
  id: '/_auth-guard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthGuardSubscriptionsLazyRoute = AuthGuardSubscriptionsLazyImport.update(
  {
    id: '/subscriptions',
    path: '/subscriptions',
    getParentRoute: () => AuthGuardRouteRoute,
  } as any,
).lazy(() =>
  import('./core/routes/_auth-guard/subscriptions.lazy').then((d) => d.Route),
)

const AuthGuardProfileLazyRoute = AuthGuardProfileLazyImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthGuardRouteRoute,
} as any).lazy(() =>
  import('./core/routes/_auth-guard/profile.lazy').then((d) => d.Route),
)

const AuthGuardLogoutLazyRoute = AuthGuardLogoutLazyImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => AuthGuardRouteRoute,
} as any).lazy(() =>
  import('./core/routes/_auth-guard/logout.lazy').then((d) => d.Route),
)

const IdLoginRoute = IdLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => IdRouteRoute,
} as any)

const AuthGuardLibraryRouteRoute = AuthGuardLibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => AuthGuardRouteRoute,
} as any)

const AuthGuardLibraryPaymentsLazyRoute =
  AuthGuardLibraryPaymentsLazyImport.update({
    id: '/payments',
    path: '/payments',
    getParentRoute: () => AuthGuardLibraryRouteRoute,
  } as any).lazy(() =>
    import('./core/routes/_auth-guard/library/payments.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthGuardLibraryCategoriesLazyRoute =
  AuthGuardLibraryCategoriesLazyImport.update({
    id: '/categories',
    path: '/categories',
    getParentRoute: () => AuthGuardLibraryRouteRoute,
  } as any).lazy(() =>
    import('./core/routes/_auth-guard/library/categories.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthGuardLibraryApplicationsLazyRoute =
  AuthGuardLibraryApplicationsLazyImport.update({
    id: '/applications',
    path: '/applications',
    getParentRoute: () => AuthGuardLibraryRouteRoute,
  } as any).lazy(() =>
    import('./core/routes/_auth-guard/library/applications.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_auth-guard': {
      id: '/_auth-guard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthGuardRouteImport
      parentRoute: typeof rootRoute
    }
    '/_id': {
      id: '/_id'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof IdRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth-guard/library': {
      id: '/_auth-guard/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof AuthGuardLibraryRouteImport
      parentRoute: typeof AuthGuardRouteImport
    }
    '/_id/login': {
      id: '/_id/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof IdLoginImport
      parentRoute: typeof IdRouteImport
    }
    '/_auth-guard/logout': {
      id: '/_auth-guard/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof AuthGuardLogoutLazyImport
      parentRoute: typeof AuthGuardRouteImport
    }
    '/_auth-guard/profile': {
      id: '/_auth-guard/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthGuardProfileLazyImport
      parentRoute: typeof AuthGuardRouteImport
    }
    '/_auth-guard/subscriptions': {
      id: '/_auth-guard/subscriptions'
      path: '/subscriptions'
      fullPath: '/subscriptions'
      preLoaderRoute: typeof AuthGuardSubscriptionsLazyImport
      parentRoute: typeof AuthGuardRouteImport
    }
    '/_auth-guard/library/applications': {
      id: '/_auth-guard/library/applications'
      path: '/applications'
      fullPath: '/library/applications'
      preLoaderRoute: typeof AuthGuardLibraryApplicationsLazyImport
      parentRoute: typeof AuthGuardLibraryRouteImport
    }
    '/_auth-guard/library/categories': {
      id: '/_auth-guard/library/categories'
      path: '/categories'
      fullPath: '/library/categories'
      preLoaderRoute: typeof AuthGuardLibraryCategoriesLazyImport
      parentRoute: typeof AuthGuardLibraryRouteImport
    }
    '/_auth-guard/library/payments': {
      id: '/_auth-guard/library/payments'
      path: '/payments'
      fullPath: '/library/payments'
      preLoaderRoute: typeof AuthGuardLibraryPaymentsLazyImport
      parentRoute: typeof AuthGuardLibraryRouteImport
    }
  }
}

// Create and export the route tree

interface AuthGuardLibraryRouteRouteChildren {
  AuthGuardLibraryApplicationsLazyRoute: typeof AuthGuardLibraryApplicationsLazyRoute
  AuthGuardLibraryCategoriesLazyRoute: typeof AuthGuardLibraryCategoriesLazyRoute
  AuthGuardLibraryPaymentsLazyRoute: typeof AuthGuardLibraryPaymentsLazyRoute
}

const AuthGuardLibraryRouteRouteChildren: AuthGuardLibraryRouteRouteChildren = {
  AuthGuardLibraryApplicationsLazyRoute: AuthGuardLibraryApplicationsLazyRoute,
  AuthGuardLibraryCategoriesLazyRoute: AuthGuardLibraryCategoriesLazyRoute,
  AuthGuardLibraryPaymentsLazyRoute: AuthGuardLibraryPaymentsLazyRoute,
}

const AuthGuardLibraryRouteRouteWithChildren =
  AuthGuardLibraryRouteRoute._addFileChildren(
    AuthGuardLibraryRouteRouteChildren,
  )

interface AuthGuardRouteRouteChildren {
  AuthGuardLibraryRouteRoute: typeof AuthGuardLibraryRouteRouteWithChildren
  AuthGuardLogoutLazyRoute: typeof AuthGuardLogoutLazyRoute
  AuthGuardProfileLazyRoute: typeof AuthGuardProfileLazyRoute
  AuthGuardSubscriptionsLazyRoute: typeof AuthGuardSubscriptionsLazyRoute
}

const AuthGuardRouteRouteChildren: AuthGuardRouteRouteChildren = {
  AuthGuardLibraryRouteRoute: AuthGuardLibraryRouteRouteWithChildren,
  AuthGuardLogoutLazyRoute: AuthGuardLogoutLazyRoute,
  AuthGuardProfileLazyRoute: AuthGuardProfileLazyRoute,
  AuthGuardSubscriptionsLazyRoute: AuthGuardSubscriptionsLazyRoute,
}

const AuthGuardRouteRouteWithChildren = AuthGuardRouteRoute._addFileChildren(
  AuthGuardRouteRouteChildren,
)

interface IdRouteRouteChildren {
  IdLoginRoute: typeof IdLoginRoute
}

const IdRouteRouteChildren: IdRouteRouteChildren = {
  IdLoginRoute: IdLoginRoute,
}

const IdRouteRouteWithChildren =
  IdRouteRoute._addFileChildren(IdRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof IdRouteRouteWithChildren
  '/library': typeof AuthGuardLibraryRouteRouteWithChildren
  '/login': typeof IdLoginRoute
  '/logout': typeof AuthGuardLogoutLazyRoute
  '/profile': typeof AuthGuardProfileLazyRoute
  '/subscriptions': typeof AuthGuardSubscriptionsLazyRoute
  '/library/applications': typeof AuthGuardLibraryApplicationsLazyRoute
  '/library/categories': typeof AuthGuardLibraryCategoriesLazyRoute
  '/library/payments': typeof AuthGuardLibraryPaymentsLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof IdRouteRouteWithChildren
  '/library': typeof AuthGuardLibraryRouteRouteWithChildren
  '/login': typeof IdLoginRoute
  '/logout': typeof AuthGuardLogoutLazyRoute
  '/profile': typeof AuthGuardProfileLazyRoute
  '/subscriptions': typeof AuthGuardSubscriptionsLazyRoute
  '/library/applications': typeof AuthGuardLibraryApplicationsLazyRoute
  '/library/categories': typeof AuthGuardLibraryCategoriesLazyRoute
  '/library/payments': typeof AuthGuardLibraryPaymentsLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_auth-guard': typeof AuthGuardRouteRouteWithChildren
  '/_id': typeof IdRouteRouteWithChildren
  '/_auth-guard/library': typeof AuthGuardLibraryRouteRouteWithChildren
  '/_id/login': typeof IdLoginRoute
  '/_auth-guard/logout': typeof AuthGuardLogoutLazyRoute
  '/_auth-guard/profile': typeof AuthGuardProfileLazyRoute
  '/_auth-guard/subscriptions': typeof AuthGuardSubscriptionsLazyRoute
  '/_auth-guard/library/applications': typeof AuthGuardLibraryApplicationsLazyRoute
  '/_auth-guard/library/categories': typeof AuthGuardLibraryCategoriesLazyRoute
  '/_auth-guard/library/payments': typeof AuthGuardLibraryPaymentsLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/library'
    | '/login'
    | '/logout'
    | '/profile'
    | '/subscriptions'
    | '/library/applications'
    | '/library/categories'
    | '/library/payments'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/library'
    | '/login'
    | '/logout'
    | '/profile'
    | '/subscriptions'
    | '/library/applications'
    | '/library/categories'
    | '/library/payments'
  id:
    | '__root__'
    | '/'
    | '/_auth-guard'
    | '/_id'
    | '/_auth-guard/library'
    | '/_id/login'
    | '/_auth-guard/logout'
    | '/_auth-guard/profile'
    | '/_auth-guard/subscriptions'
    | '/_auth-guard/library/applications'
    | '/_auth-guard/library/categories'
    | '/_auth-guard/library/payments'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthGuardRouteRoute: typeof AuthGuardRouteRouteWithChildren
  IdRouteRoute: typeof IdRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthGuardRouteRoute: AuthGuardRouteRouteWithChildren,
  IdRouteRoute: IdRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_auth-guard",
        "/_id"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_auth-guard": {
      "filePath": "_auth-guard/route.tsx",
      "children": [
        "/_auth-guard/library",
        "/_auth-guard/logout",
        "/_auth-guard/profile",
        "/_auth-guard/subscriptions"
      ]
    },
    "/_id": {
      "filePath": "_id/route.tsx",
      "children": [
        "/_id/login"
      ]
    },
    "/_auth-guard/library": {
      "filePath": "_auth-guard/library/route.tsx",
      "parent": "/_auth-guard",
      "children": [
        "/_auth-guard/library/applications",
        "/_auth-guard/library/categories",
        "/_auth-guard/library/payments"
      ]
    },
    "/_id/login": {
      "filePath": "_id/login.tsx",
      "parent": "/_id"
    },
    "/_auth-guard/logout": {
      "filePath": "_auth-guard/logout.lazy.tsx",
      "parent": "/_auth-guard"
    },
    "/_auth-guard/profile": {
      "filePath": "_auth-guard/profile.lazy.tsx",
      "parent": "/_auth-guard"
    },
    "/_auth-guard/subscriptions": {
      "filePath": "_auth-guard/subscriptions.lazy.tsx",
      "parent": "/_auth-guard"
    },
    "/_auth-guard/library/applications": {
      "filePath": "_auth-guard/library/applications.lazy.tsx",
      "parent": "/_auth-guard/library"
    },
    "/_auth-guard/library/categories": {
      "filePath": "_auth-guard/library/categories.lazy.tsx",
      "parent": "/_auth-guard/library"
    },
    "/_auth-guard/library/payments": {
      "filePath": "_auth-guard/library/payments.lazy.tsx",
      "parent": "/_auth-guard/library"
    }
  }
}
ROUTE_MANIFEST_END */
